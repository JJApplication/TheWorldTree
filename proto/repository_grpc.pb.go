// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/repository.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RepositoryService_GetRepositories_FullMethodName  = "/proto.RepositoryService/GetRepositories"
	RepositoryService_GetRepository_FullMethodName    = "/proto.RepositoryService/GetRepository"
	RepositoryService_SyncRepositories_FullMethodName = "/proto.RepositoryService/SyncRepositories"
	RepositoryService_GetCommits_FullMethodName       = "/proto.RepositoryService/GetCommits"
	RepositoryService_SyncCommits_FullMethodName      = "/proto.RepositoryService/SyncCommits"
	RepositoryService_SyncCommitsAll_FullMethodName   = "/proto.RepositoryService/SyncCommitsAll"
)

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	GetRepositories(ctx context.Context, in *GetRepositoriesRequest, opts ...grpc.CallOption) (*GetRepositoriesResponse, error)
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryResponse, error)
	SyncRepositories(ctx context.Context, in *SyncRepositoriesRequest, opts ...grpc.CallOption) (*SyncRepositoriesResponse, error)
	GetCommits(ctx context.Context, in *GetCommitsRequest, opts ...grpc.CallOption) (*GetCommitsResponse, error)
	SyncCommits(ctx context.Context, in *SyncCommitsRequest, opts ...grpc.CallOption) (*SyncCommitsResponse, error)
	SyncCommitsAll(ctx context.Context, in *SyncCommitsAllRequest, opts ...grpc.CallOption) (*SyncCommitsResponse, error)
}

type repositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceClient(cc grpc.ClientConnInterface) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) GetRepositories(ctx context.Context, in *GetRepositoriesRequest, opts ...grpc.CallOption) (*GetRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoriesResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) SyncRepositories(ctx context.Context, in *SyncRepositoriesRequest, opts ...grpc.CallOption) (*SyncRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncRepositoriesResponse)
	err := c.cc.Invoke(ctx, RepositoryService_SyncRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetCommits(ctx context.Context, in *GetCommitsRequest, opts ...grpc.CallOption) (*GetCommitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommitsResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetCommits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) SyncCommits(ctx context.Context, in *SyncCommitsRequest, opts ...grpc.CallOption) (*SyncCommitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncCommitsResponse)
	err := c.cc.Invoke(ctx, RepositoryService_SyncCommits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) SyncCommitsAll(ctx context.Context, in *SyncCommitsAllRequest, opts ...grpc.CallOption) (*SyncCommitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncCommitsResponse)
	err := c.cc.Invoke(ctx, RepositoryService_SyncCommitsAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
// All implementations must embed UnimplementedRepositoryServiceServer
// for forward compatibility
type RepositoryServiceServer interface {
	GetRepositories(context.Context, *GetRepositoriesRequest) (*GetRepositoriesResponse, error)
	GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryResponse, error)
	SyncRepositories(context.Context, *SyncRepositoriesRequest) (*SyncRepositoriesResponse, error)
	GetCommits(context.Context, *GetCommitsRequest) (*GetCommitsResponse, error)
	SyncCommits(context.Context, *SyncCommitsRequest) (*SyncCommitsResponse, error)
	SyncCommitsAll(context.Context, *SyncCommitsAllRequest) (*SyncCommitsResponse, error)
	mustEmbedUnimplementedRepositoryServiceServer()
}

// UnimplementedRepositoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (UnimplementedRepositoryServiceServer) GetRepositories(context.Context, *GetRepositoriesRequest) (*GetRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositories not implemented")
}
func (UnimplementedRepositoryServiceServer) GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) SyncRepositories(context.Context, *SyncRepositoriesRequest) (*SyncRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRepositories not implemented")
}
func (UnimplementedRepositoryServiceServer) GetCommits(context.Context, *GetCommitsRequest) (*GetCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommits not implemented")
}
func (UnimplementedRepositoryServiceServer) SyncCommits(context.Context, *SyncCommitsRequest) (*SyncCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCommits not implemented")
}
func (UnimplementedRepositoryServiceServer) SyncCommitsAll(context.Context, *SyncCommitsAllRequest) (*SyncCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCommitsAll not implemented")
}
func (UnimplementedRepositoryServiceServer) mustEmbedUnimplementedRepositoryServiceServer() {}

// UnsafeRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceServer will
// result in compilation errors.
type UnsafeRepositoryServiceServer interface {
	mustEmbedUnimplementedRepositoryServiceServer()
}

func RegisterRepositoryServiceServer(s grpc.ServiceRegistrar, srv RepositoryServiceServer) {
	s.RegisterService(&RepositoryService_ServiceDesc, srv)
}

func _RepositoryService_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetRepositories(ctx, req.(*GetRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_SyncRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).SyncRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_SyncRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).SyncRepositories(ctx, req.(*SyncRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetCommits(ctx, req.(*GetCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_SyncCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).SyncCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_SyncCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).SyncCommits(ctx, req.(*SyncCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_SyncCommitsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCommitsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).SyncCommitsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_SyncCommitsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).SyncCommitsAll(ctx, req.(*SyncCommitsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryService_ServiceDesc is the grpc.ServiceDesc for RepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepositories",
			Handler:    _RepositoryService_GetRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _RepositoryService_GetRepository_Handler,
		},
		{
			MethodName: "SyncRepositories",
			Handler:    _RepositoryService_SyncRepositories_Handler,
		},
		{
			MethodName: "GetCommits",
			Handler:    _RepositoryService_GetCommits_Handler,
		},
		{
			MethodName: "SyncCommits",
			Handler:    _RepositoryService_SyncCommits_Handler,
		},
		{
			MethodName: "SyncCommitsAll",
			Handler:    _RepositoryService_SyncCommitsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/repository.proto",
}
