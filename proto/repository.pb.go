// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/repository.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Repository struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FullName      string                 `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Language      string                 `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	Stars         int32                  `protobuf:"varint,7,opt,name=stars,proto3" json:"stars,omitempty"`
	Forks         int32                  `protobuf:"varint,8,opt,name=forks,proto3" json:"forks,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SyncedAt      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=synced_at,json=syncedAt,proto3" json:"synced_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Repository) Reset() {
	*x = Repository{}
	mi := &file_proto_repository_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{0}
}

func (x *Repository) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Repository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Repository) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Repository) GetStars() int32 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *Repository) GetForks() int32 {
	if x != nil {
		return x.Forks
	}
	return 0
}

func (x *Repository) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Repository) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Repository) GetSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncedAt
	}
	return nil
}

type Commit struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sha                string                 `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Message            string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	AuthorName         string                 `protobuf:"bytes,4,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorEmail        string                 `protobuf:"bytes,5,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	CommitDate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=commit_date,json=commitDate,proto3" json:"commit_date,omitempty"`
	RepositoryFullName string                 `protobuf:"bytes,7,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	SyncedAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=synced_at,json=syncedAt,proto3" json:"synced_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_proto_repository_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{1}
}

func (x *Commit) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *Commit) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *Commit) GetCommitDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitDate
	}
	return nil
}

func (x *Commit) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *Commit) GetSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncedAt
	}
	return nil
}

type GetRepositoriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepositoriesRequest) Reset() {
	*x = GetRepositoriesRequest{}
	mi := &file_proto_repository_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoriesRequest) ProtoMessage() {}

func (x *GetRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*GetRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{2}
}

func (x *GetRepositoriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRepositoriesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetRepositoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repositories  []*Repository          `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepositoriesResponse) Reset() {
	*x = GetRepositoriesResponse{}
	mi := &file_proto_repository_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoriesResponse) ProtoMessage() {}

func (x *GetRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*GetRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{3}
}

func (x *GetRepositoriesResponse) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *GetRepositoriesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetRepositoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FullName      string                 `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepositoryRequest) Reset() {
	*x = GetRepositoryRequest{}
	mi := &file_proto_repository_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryRequest) ProtoMessage() {}

func (x *GetRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryRequest.ProtoReflect.Descriptor instead.
func (*GetRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{4}
}

func (x *GetRepositoryRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type GetRepositoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    *Repository            `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepositoryResponse) Reset() {
	*x = GetRepositoryResponse{}
	mi := &file_proto_repository_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryResponse) ProtoMessage() {}

func (x *GetRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryResponse.ProtoReflect.Descriptor instead.
func (*GetRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{5}
}

func (x *GetRepositoryResponse) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type SyncRepositoriesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUrls []string               `protobuf:"bytes,1,rep,name=repository_urls,json=repositoryUrls,proto3" json:"repository_urls,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SyncRepositoriesRequest) Reset() {
	*x = SyncRepositoriesRequest{}
	mi := &file_proto_repository_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRepositoriesRequest) ProtoMessage() {}

func (x *SyncRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*SyncRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{6}
}

func (x *SyncRepositoriesRequest) GetRepositoryUrls() []string {
	if x != nil {
		return x.RepositoryUrls
	}
	return nil
}

type SyncRepositoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SyncedCount   int32                  `protobuf:"varint,2,opt,name=synced_count,json=syncedCount,proto3" json:"synced_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncRepositoriesResponse) Reset() {
	*x = SyncRepositoriesResponse{}
	mi := &file_proto_repository_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRepositoriesResponse) ProtoMessage() {}

func (x *SyncRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*SyncRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{7}
}

func (x *SyncRepositoriesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncRepositoriesResponse) GetSyncedCount() int32 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

type GetCommitsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RepositoryFullName string                 `protobuf:"bytes,1,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	Limit              int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset             int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetCommitsRequest) Reset() {
	*x = GetCommitsRequest{}
	mi := &file_proto_repository_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitsRequest) ProtoMessage() {}

func (x *GetCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitsRequest.ProtoReflect.Descriptor instead.
func (*GetCommitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{8}
}

func (x *GetCommitsRequest) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GetCommitsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCommitsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetCommitsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commits       []*Commit              `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitsResponse) Reset() {
	*x = GetCommitsResponse{}
	mi := &file_proto_repository_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitsResponse) ProtoMessage() {}

func (x *GetCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitsResponse.ProtoReflect.Descriptor instead.
func (*GetCommitsResponse) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{9}
}

func (x *GetCommitsResponse) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *GetCommitsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SyncCommitsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RepositoryFullName string                 `protobuf:"bytes,1,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	Limit              int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"` // default 50
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SyncCommitsRequest) Reset() {
	*x = SyncCommitsRequest{}
	mi := &file_proto_repository_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCommitsRequest) ProtoMessage() {}

func (x *SyncCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCommitsRequest.ProtoReflect.Descriptor instead.
func (*SyncCommitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{10}
}

func (x *SyncCommitsRequest) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *SyncCommitsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SyncCommitsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SyncedCount   int32                  `protobuf:"varint,2,opt,name=synced_count,json=syncedCount,proto3" json:"synced_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncCommitsResponse) Reset() {
	*x = SyncCommitsResponse{}
	mi := &file_proto_repository_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCommitsResponse) ProtoMessage() {}

func (x *SyncCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCommitsResponse.ProtoReflect.Descriptor instead.
func (*SyncCommitsResponse) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{11}
}

func (x *SyncCommitsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncCommitsResponse) GetSyncedCount() int32 {
	if x != nil {
		return x.SyncedCount
	}
	return 0
}

var File_proto_repository_proto protoreflect.FileDescriptor

const file_proto_repository_proto_rawDesc = "" +
	"\n" +
	"\x16proto/repository.proto\x12\x05proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf8\x02\n" +
	"\n" +
	"Repository\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tfull_name\x18\x03 \x01(\tR\bfullName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x10\n" +
	"\x03url\x18\x05 \x01(\tR\x03url\x12\x1a\n" +
	"\blanguage\x18\x06 \x01(\tR\blanguage\x12\x14\n" +
	"\x05stars\x18\a \x01(\x05R\x05stars\x12\x14\n" +
	"\x05forks\x18\b \x01(\x05R\x05forks\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x127\n" +
	"\tsynced_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\bsyncedAt\"\xb0\x02\n" +
	"\x06Commit\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x10\n" +
	"\x03sha\x18\x02 \x01(\tR\x03sha\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1f\n" +
	"\vauthor_name\x18\x04 \x01(\tR\n" +
	"authorName\x12!\n" +
	"\fauthor_email\x18\x05 \x01(\tR\vauthorEmail\x12;\n" +
	"\vcommit_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"commitDate\x120\n" +
	"\x14repository_full_name\x18\a \x01(\tR\x12repositoryFullName\x127\n" +
	"\tsynced_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\bsyncedAt\"F\n" +
	"\x16GetRepositoriesRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\"f\n" +
	"\x17GetRepositoriesResponse\x125\n" +
	"\frepositories\x18\x01 \x03(\v2\x11.proto.RepositoryR\frepositories\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\"3\n" +
	"\x14GetRepositoryRequest\x12\x1b\n" +
	"\tfull_name\x18\x01 \x01(\tR\bfullName\"J\n" +
	"\x15GetRepositoryResponse\x121\n" +
	"\n" +
	"repository\x18\x01 \x01(\v2\x11.proto.RepositoryR\n" +
	"repository\"B\n" +
	"\x17SyncRepositoriesRequest\x12'\n" +
	"\x0frepository_urls\x18\x01 \x03(\tR\x0erepositoryUrls\"W\n" +
	"\x18SyncRepositoriesResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12!\n" +
	"\fsynced_count\x18\x02 \x01(\x05R\vsyncedCount\"s\n" +
	"\x11GetCommitsRequest\x120\n" +
	"\x14repository_full_name\x18\x01 \x01(\tR\x12repositoryFullName\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offset\"S\n" +
	"\x12GetCommitsResponse\x12'\n" +
	"\acommits\x18\x01 \x03(\v2\r.proto.CommitR\acommits\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\"\\\n" +
	"\x12SyncCommitsRequest\x120\n" +
	"\x14repository_full_name\x18\x01 \x01(\tR\x12repositoryFullName\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"R\n" +
	"\x13SyncCommitsResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12!\n" +
	"\fsynced_count\x18\x02 \x01(\x05R\vsyncedCount2\x8f\x03\n" +
	"\x11RepositoryService\x12P\n" +
	"\x0fGetRepositories\x12\x1d.proto.GetRepositoriesRequest\x1a\x1e.proto.GetRepositoriesResponse\x12J\n" +
	"\rGetRepository\x12\x1b.proto.GetRepositoryRequest\x1a\x1c.proto.GetRepositoryResponse\x12S\n" +
	"\x10SyncRepositories\x12\x1e.proto.SyncRepositoriesRequest\x1a\x1f.proto.SyncRepositoriesResponse\x12A\n" +
	"\n" +
	"GetCommits\x12\x18.proto.GetCommitsRequest\x1a\x19.proto.GetCommitsResponse\x12D\n" +
	"\vSyncCommits\x12\x19.proto.SyncCommitsRequest\x1a\x1a.proto.SyncCommitsResponseB\tZ\a./protob\x06proto3"

var (
	file_proto_repository_proto_rawDescOnce sync.Once
	file_proto_repository_proto_rawDescData []byte
)

func file_proto_repository_proto_rawDescGZIP() []byte {
	file_proto_repository_proto_rawDescOnce.Do(func() {
		file_proto_repository_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_repository_proto_rawDesc), len(file_proto_repository_proto_rawDesc)))
	})
	return file_proto_repository_proto_rawDescData
}

var file_proto_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_repository_proto_goTypes = []any{
	(*Repository)(nil),               // 0: proto.Repository
	(*Commit)(nil),                   // 1: proto.Commit
	(*GetRepositoriesRequest)(nil),   // 2: proto.GetRepositoriesRequest
	(*GetRepositoriesResponse)(nil),  // 3: proto.GetRepositoriesResponse
	(*GetRepositoryRequest)(nil),     // 4: proto.GetRepositoryRequest
	(*GetRepositoryResponse)(nil),    // 5: proto.GetRepositoryResponse
	(*SyncRepositoriesRequest)(nil),  // 6: proto.SyncRepositoriesRequest
	(*SyncRepositoriesResponse)(nil), // 7: proto.SyncRepositoriesResponse
	(*GetCommitsRequest)(nil),        // 8: proto.GetCommitsRequest
	(*GetCommitsResponse)(nil),       // 9: proto.GetCommitsResponse
	(*SyncCommitsRequest)(nil),       // 10: proto.SyncCommitsRequest
	(*SyncCommitsResponse)(nil),      // 11: proto.SyncCommitsResponse
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
}
var file_proto_repository_proto_depIdxs = []int32{
	12, // 0: proto.Repository.created_at:type_name -> google.protobuf.Timestamp
	12, // 1: proto.Repository.updated_at:type_name -> google.protobuf.Timestamp
	12, // 2: proto.Repository.synced_at:type_name -> google.protobuf.Timestamp
	12, // 3: proto.Commit.commit_date:type_name -> google.protobuf.Timestamp
	12, // 4: proto.Commit.synced_at:type_name -> google.protobuf.Timestamp
	0,  // 5: proto.GetRepositoriesResponse.repositories:type_name -> proto.Repository
	0,  // 6: proto.GetRepositoryResponse.repository:type_name -> proto.Repository
	1,  // 7: proto.GetCommitsResponse.commits:type_name -> proto.Commit
	2,  // 8: proto.RepositoryService.GetRepositories:input_type -> proto.GetRepositoriesRequest
	4,  // 9: proto.RepositoryService.GetRepository:input_type -> proto.GetRepositoryRequest
	6,  // 10: proto.RepositoryService.SyncRepositories:input_type -> proto.SyncRepositoriesRequest
	8,  // 11: proto.RepositoryService.GetCommits:input_type -> proto.GetCommitsRequest
	10, // 12: proto.RepositoryService.SyncCommits:input_type -> proto.SyncCommitsRequest
	3,  // 13: proto.RepositoryService.GetRepositories:output_type -> proto.GetRepositoriesResponse
	5,  // 14: proto.RepositoryService.GetRepository:output_type -> proto.GetRepositoryResponse
	7,  // 15: proto.RepositoryService.SyncRepositories:output_type -> proto.SyncRepositoriesResponse
	9,  // 16: proto.RepositoryService.GetCommits:output_type -> proto.GetCommitsResponse
	11, // 17: proto.RepositoryService.SyncCommits:output_type -> proto.SyncCommitsResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_repository_proto_init() }
func file_proto_repository_proto_init() {
	if File_proto_repository_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_repository_proto_rawDesc), len(file_proto_repository_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_repository_proto_goTypes,
		DependencyIndexes: file_proto_repository_proto_depIdxs,
		MessageInfos:      file_proto_repository_proto_msgTypes,
	}.Build()
	File_proto_repository_proto = out.File
	file_proto_repository_proto_goTypes = nil
	file_proto_repository_proto_depIdxs = nil
}
